name: Prod - Deploy

on:
  workflow_run:
    workflows: [Stage - Build & Deploy]
    types:
      - completed

jobs:
  download-sha:
    environment:
      name: prod
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.save-sha.outputs.sha }}
    steps:
      - name: Download artifact
        uses: actions/github-script@v8
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha_output"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/artifacts';
            if (!fs.existsSync(temp)){
              fs.mkdirSync(temp);
            }
            fs.writeFileSync(path.join(temp, 'sha_output.zip'), Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip "${{ runner.temp }}/artifacts/sha_output.zip" -d "${{ runner.temp }}/artifacts"

      - name: Save SHA
        id: save-sha
        run: |
          SHA_OUTPUT=$(cat "${{ runner.temp }}/artifacts/sha.txt" | cut -d '=' -f2)
          echo "sha=$SHA_OUTPUT" >> $GITHUB_OUTPUT


  create-tag:
    needs: download-sha
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Re-tag an image for prod
        run: |
          docker buildx imagetools create --tag \
          ${{ vars.DOCKERHUB_USERNAME }}/jb-basic-app:main-${{ github.run_number }} \
          ${{ vars.DOCKERHUB_USERNAME }}/jb-basic-app:stage-${{ needs.download-sha.outputs.sha }}

  deploy:
    needs: create-tag
    environment:
      name: prod
      url: https://${{ vars.BASE_DOMAIN_NAME }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: stage
      - name: Reset to a commit
        run: |
          git reset --hard ${{ needs.download-sha.outputs.sha }}
      - name: Deploy a Helm-chart
        uses: ./.github/actions/basic-app-deploy
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}
          domain_name: ${{ vars.BASE_DOMAIN_NAME }}
          values_path: manifests-helm/values/prod.yaml
          namespace: prod
          release_name: jb-basic-app
          image_tag: main-${{ github.run_number }}
  
  create-pull-request:
    permissions:
      pull-requests: write
      contents: write
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          ref: stage
      - name: Reset to a commit
        run: |
          git reset --hard ${{ needs.download-sha.outputs.sha }}
      - name: Write tag to version file
        run: yq -i '.image.tag = "main-${{ github.run_number }}"' manifests-helm/values/prod.yaml
      - name: Commit a new image tag to values
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git checkout -b release-main-${{ github.run_number }}
          git add manifests-helm/values/prod.yaml
          git commit -m "save tag after successful deploy for prod"
          git push origin release-main-${{ github.run_number }}
      - name: Create a PR
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create -B main -H release-main-${{ github.run_number }} --title 'Merge release-main-${{ github.run_number }} into main' \
          --body 'Created by Github action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'