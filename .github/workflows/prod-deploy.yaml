name: Prod - Deploy

on:
  workflow_run:
    workflows: [Stage - Build & Deploy]
    types:
      - completed

jobs:
  download_sha:
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/github-script@v8
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "sha_output"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/artifacts';
            if (!fs.existsSync(temp)){
              fs.mkdirSync(temp);
            }
            fs.writeFileSync(path.join(temp, 'sha_output.zip'), Buffer.from(download.data));

      - name: Unzip artifact
        run: unzip "${{ runner.temp }}/artifacts/sha_output.zip" -d "${{ runner.temp }}/artifacts"

      - name: Save SHA
        run: |
          SHA=$(cat "${{ runner.temp }}/artifacts/sha.txt")
          echo "$SHA" >> $GITHUB_ENV


  create-tag-after-approve:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment:
      name: prod
      url: https://${{ vars.BASE_DOMAIN_NAME }}
    steps:
      - uses: actions/download-artifact@v5
        with:
          name: sha-output
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Re-tag an image for prod
        run: |
          docker buildx imagetools create --tag \
          ${{ vars.DOCKERHUB_USERNAME }}/jb-basic-app:main-${{ github.run_number }} \
          ${{ vars.DOCKERHUB_USERNAME }}/jb-basic-app:stage-${{ env.SHA }}

  # deploy:
  #   needs: create-tag-after-approve
  #   uses: ./.github/workflows/general-deploy.yaml
  #   secrets: inherit
  #   with:
  #     environment: prod
  #     image_tag: main-${{ github.run_number }}


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: create-tag-after-approve
  #   steps:
  #     - uses: actions/checkout@v5
  #     - name: Deploy a Helm-chart
  #       uses: ./.github/actions/basic-app-deploy
  #       with:
  #         kubeconfig: ${{ secrets.KUBECONFIG }}
  #         domain_name: ${{ vars.BASE_DOMAIN_NAME }}
  #         values_path: manifests-helm/values/prod.yaml
  #         namespace: prod
  #         release_name: prod
  #         image_tag: main-${{ github.run_number }}

  #     - name: Notify SUCCESS in Telegram
  #       if: success()
  #       uses: ./.github/actions/telegram-notifier
  #       with:
  #         telegram_bot_token: '${{ secrets.TELEGRAM_BOT_TOKEN }}'
  #         telegram_chat_id: '${{ secrets.TELEGRAM_CHAT_ID }}'
  #         message_content: |
  #           UPDATE
  #           Env: <code>prod</code> 

  #           Link: https://${{ vars.BASE_DOMAIN_NAME }}

  #     - name: Notify FAIL in Telegram
  #       if: failure()
  #       uses: ./.github/actions/telegram-notifier
  #       with:
  #         telegram_bot_token: '${{ secrets.TELEGRAM_BOT_TOKEN }}'
  #         telegram_chat_id: '${{ secrets.TELEGRAM_CHAT_ID }}'
  #         message_content: |
  #           ERROR
  #           An error occured while deploying a <code>prod</code>

  #           More details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

